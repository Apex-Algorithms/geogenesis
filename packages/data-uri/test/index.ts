import {deserialize, serialize, Value} from '../lib';
import {displayData, toHex} from '../lib/util';
import {instantiate, __AdaptedExports as AssemblyExports} from '../build/test';
import {Gen} from './gen';
import {xoshiro128ss} from './rng';
import {expect} from 'expect';
import {readFileSync} from 'fs';
import {sha256} from 'multiformats/hashes/sha2';

const loadAssembly = async (): Promise<typeof AssemblyExports> =>
  await instantiate(
    await WebAssembly.compile(readFileSync('build/test.wasm')),
    {
      env: {
        abort: () => {
          throw 'abort';
        },
      },
      conversion: {
        typeConversion: {
          bytesToHex: (bytes: Uint8Array): string => toHex(bytes),
          bytesToString: (bytes: Uint8Array): string =>
            String.fromCodePoint(...bytes),
        },
      },
      index: {
        log: {
          log: (level: number, msg: string) =>
            console.log(`WASM log (${level}): ${msg}`),
        },
      },
    }
  );

const serialization_test = async (
  assemblyTest: (chunks: Uint8Array[]) => string,
  input: Value
): Promise<string> => {
  // console.log(displayData(input));
  const hasher = async (data: Uint8Array): Promise<Uint8Array> =>
    (await sha256.digest(data)).digest;

  const chunks = await serialize(hasher, input);
  // console.log(chunks.map(c => toHex(c)));

  const value: any = deserialize(chunks);
  expect(value).toStrictEqual(input);

  const result = assemblyTest(chunks);

  // console.log(result);
  expect(result).toStrictEqual(displayData(input));

  return result;
};

(async () => {
  const assemblyTest = (await loadAssembly()).test;
  const seed = Math.random().toString(16);
  console.log({seed});
  const gen = new Gen(xoshiro128ss(seed));

  await serialization_test(
    assemblyTest,
    {"title":"Test Proposal \"Geo_hVnS5cs9pqNMnl3hQ8b2S\"","description":"This content was generated by an integration test.","pages":[{"content":[{"id":"Geo_H-u15_XB2wPukO88aGmZE","__typename":"ImageBlock","size":"AUTO","image":{"id":"Geo_qMJWlZRWFk-TP7ePhYYb6","__typename":"Image","width":100,"height":100,"uri":"QmVxQUWLV1bpBU1gp4NHenxfPk7WFTsMY2FcYZ17DnT7bG/nft.png"}}],"id":"Geo_hVnS5cs9pqNMnl3hQ8b2S","__typename":"Page"}],"dataSources":[],"presenterDeclarations":[]},
  );
  await serialization_test(assemblyTest, -7591862999187455);
  await serialization_test(assemblyTest, {b: 42, a: ['?', false]});
  await serialization_test(assemblyTest, {
    title: 'Test Proposal "Geo_hVnS5cs9pqNMnl3hQ8b2S"',
    description: 'This content was generated by an integration test.',
  });
  for (let i = 0; i < 1000; i++) {
    await serialization_test(assemblyTest, gen.genValue(3));
  }

  const res = await serialization_test(
    assemblyTest,
    {
      "title": "Integration Test: createSubgraphReference",
      "description": "Attempts to create a reference to the previously created SubgraphDataSource.",
      "pages": [{
        "content": [{
          "id": "Geo_koF6w1jBEHvY0XIqtndbP",
          "__typename": "TextBlock",
          "style": "H1",
          "attributedStrings": [{
            "string": "Hello, world!",
            "__typename": "AttributedString",
            "id": "Geo_8CgX4LqWGMnchXlo7qbBz",
            "bold": false,
            "italic": false,
            "strikethrough": false,
            "link": {
              "id": "Geo_BCwiJJCT3-Us3sT5oaKOz",
              "__typename": "Reference",
              "dataSource": {
                "id": "Geo_39Scy59riw7UzoS8-MCx-",
                "subgraphId": "https://api.thegraph.com/subgraphs/name/graphprotocol/everest",
                "__typename": "SubgraphDataSource",
                "collectionName": "projects"
              },
              "entityId": null,
              "presenter": null
            },
            "underline": false,
            "code": false
          }]
        }],
        "id": "Geo_T5gjxtKv5p0NPZqkEREQT",
        "__typename": "Page"
      }],
      "dataSources": [],
      "presenterDeclarations": [],
      "person": null
    },
  );
})();
