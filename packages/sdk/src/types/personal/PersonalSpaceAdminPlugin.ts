/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../common'
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'

export declare namespace IDAO {
  export type ActionStruct = {
    to: PromiseOrValue<string>
    value: PromiseOrValue<BigNumberish>
    data: PromiseOrValue<BytesLike>
  }

  export type ActionStructOutput = [string, BigNumber, string] & {
    to: string
    value: BigNumber
    data: string
  }
}

export interface PersonalSpaceAdminPluginInterface extends utils.Interface {
  functions: {
    'dao()': FunctionFragment
    'executeProposal(bytes,(address,uint256,bytes)[],uint256)': FunctionFragment
    'initialize(address)': FunctionFragment
    'isEditor(address)': FunctionFragment
    'pluginType()': FunctionFragment
    'proposalCount()': FunctionFragment
    'supportsInterface(bytes4)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'dao'
      | 'executeProposal'
      | 'initialize'
      | 'isEditor'
      | 'pluginType'
      | 'proposalCount'
      | 'supportsInterface'
  ): FunctionFragment

  encodeFunctionData(functionFragment: 'dao', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'executeProposal',
    values: [
      PromiseOrValue<BytesLike>,
      IDAO.ActionStruct[],
      PromiseOrValue<BigNumberish>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'isEditor',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(functionFragment: 'pluginType', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'proposalCount',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'supportsInterface',
    values: [PromiseOrValue<BytesLike>]
  ): string

  decodeFunctionResult(functionFragment: 'dao', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'executeProposal',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isEditor', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'pluginType', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'proposalCount',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'supportsInterface',
    data: BytesLike
  ): Result

  events: {
    'Initialized(uint8)': EventFragment
    'ProposalCreated(uint256,address,uint64,uint64,bytes,tuple[],uint256)': EventFragment
    'ProposalExecuted(uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ProposalCreated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ProposalExecuted'): EventFragment
}

export interface InitializedEventObject {
  version: number
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>

export interface ProposalCreatedEventObject {
  proposalId: BigNumber
  creator: string
  startDate: BigNumber
  endDate: BigNumber
  metadata: string
  actions: IDAO.ActionStructOutput[]
  allowFailureMap: BigNumber
}
export type ProposalCreatedEvent = TypedEvent<
  [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    string,
    IDAO.ActionStructOutput[],
    BigNumber
  ],
  ProposalCreatedEventObject
>

export type ProposalCreatedEventFilter = TypedEventFilter<ProposalCreatedEvent>

export interface ProposalExecutedEventObject {
  proposalId: BigNumber
}
export type ProposalExecutedEvent = TypedEvent<
  [BigNumber],
  ProposalExecutedEventObject
>

export type ProposalExecutedEventFilter =
  TypedEventFilter<ProposalExecutedEvent>

export interface PersonalSpaceAdminPlugin extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: PersonalSpaceAdminPluginInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    dao(overrides?: CallOverrides): Promise<[string]>

    executeProposal(
      _metadata: PromiseOrValue<BytesLike>,
      _actions: IDAO.ActionStruct[],
      _allowFailureMap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    initialize(
      _dao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    isEditor(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    pluginType(overrides?: CallOverrides): Promise<[number]>

    proposalCount(overrides?: CallOverrides): Promise<[BigNumber]>

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>
  }

  dao(overrides?: CallOverrides): Promise<string>

  executeProposal(
    _metadata: PromiseOrValue<BytesLike>,
    _actions: IDAO.ActionStruct[],
    _allowFailureMap: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  initialize(
    _dao: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  isEditor(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>

  pluginType(overrides?: CallOverrides): Promise<number>

  proposalCount(overrides?: CallOverrides): Promise<BigNumber>

  supportsInterface(
    _interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>

  callStatic: {
    dao(overrides?: CallOverrides): Promise<string>

    executeProposal(
      _metadata: PromiseOrValue<BytesLike>,
      _actions: IDAO.ActionStruct[],
      _allowFailureMap: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    initialize(
      _dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    isEditor(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>

    pluginType(overrides?: CallOverrides): Promise<number>

    proposalCount(overrides?: CallOverrides): Promise<BigNumber>

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>
  }

  filters: {
    'Initialized(uint8)'(version?: null): InitializedEventFilter
    Initialized(version?: null): InitializedEventFilter

    'ProposalCreated(uint256,address,uint64,uint64,bytes,tuple[],uint256)'(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      creator?: PromiseOrValue<string> | null,
      startDate?: null,
      endDate?: null,
      metadata?: null,
      actions?: null,
      allowFailureMap?: null
    ): ProposalCreatedEventFilter
    ProposalCreated(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      creator?: PromiseOrValue<string> | null,
      startDate?: null,
      endDate?: null,
      metadata?: null,
      actions?: null,
      allowFailureMap?: null
    ): ProposalCreatedEventFilter

    'ProposalExecuted(uint256)'(
      proposalId?: PromiseOrValue<BigNumberish> | null
    ): ProposalExecutedEventFilter
    ProposalExecuted(
      proposalId?: PromiseOrValue<BigNumberish> | null
    ): ProposalExecutedEventFilter
  }

  estimateGas: {
    dao(overrides?: CallOverrides): Promise<BigNumber>

    executeProposal(
      _metadata: PromiseOrValue<BytesLike>,
      _actions: IDAO.ActionStruct[],
      _allowFailureMap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    initialize(
      _dao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    isEditor(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    pluginType(overrides?: CallOverrides): Promise<BigNumber>

    proposalCount(overrides?: CallOverrides): Promise<BigNumber>

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>
  }

  populateTransaction: {
    dao(overrides?: CallOverrides): Promise<PopulatedTransaction>

    executeProposal(
      _metadata: PromiseOrValue<BytesLike>,
      _actions: IDAO.ActionStruct[],
      _allowFailureMap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    initialize(
      _dao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    isEditor(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    pluginType(overrides?: CallOverrides): Promise<PopulatedTransaction>

    proposalCount(overrides?: CallOverrides): Promise<PopulatedTransaction>

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>
  }
}
