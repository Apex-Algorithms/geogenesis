/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common'
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'

export interface SpacePluginInterface extends utils.Interface {
  functions: {
    'UPGRADE_PLUGIN_PERMISSION_ID()': FunctionFragment
    'acceptSubspace(address)': FunctionFragment
    'dao()': FunctionFragment
    'implementation()': FunctionFragment
    'initialize(address,string,address)': FunctionFragment
    'pluginType()': FunctionFragment
    'processGeoProposal(uint32,uint32,string)': FunctionFragment
    'proxiableUUID()': FunctionFragment
    'removeSubspace(address)': FunctionFragment
    'supportsInterface(bytes4)': FunctionFragment
    'upgradeTo(address)': FunctionFragment
    'upgradeToAndCall(address,bytes)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'UPGRADE_PLUGIN_PERMISSION_ID'
      | 'acceptSubspace'
      | 'dao'
      | 'implementation'
      | 'initialize'
      | 'pluginType'
      | 'processGeoProposal'
      | 'proxiableUUID'
      | 'removeSubspace'
      | 'supportsInterface'
      | 'upgradeTo'
      | 'upgradeToAndCall'
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: 'UPGRADE_PLUGIN_PERMISSION_ID',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'acceptSubspace',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(functionFragment: 'dao', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'implementation',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string
  encodeFunctionData(functionFragment: 'pluginType', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'processGeoProposal',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'proxiableUUID',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'removeSubspace',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'supportsInterface',
    values: [PromiseOrValue<BytesLike>]
  ): string
  encodeFunctionData(
    functionFragment: 'upgradeTo',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'upgradeToAndCall',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string

  decodeFunctionResult(
    functionFragment: 'UPGRADE_PLUGIN_PERMISSION_ID',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'acceptSubspace',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'dao', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'implementation',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'pluginType', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'processGeoProposal',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'proxiableUUID',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'removeSubspace',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'supportsInterface',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'upgradeTo', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'upgradeToAndCall',
    data: BytesLike
  ): Result

  events: {
    'AdminChanged(address,address)': EventFragment
    'BeaconUpgraded(address)': EventFragment
    'GeoProposalProcessed(uint32,uint32,string)': EventFragment
    'Initialized(uint8)': EventFragment
    'SubspaceAccepted(address)': EventFragment
    'SubspaceRemoved(address)': EventFragment
    'SuccessorSpaceCreated(address)': EventFragment
    'Upgraded(address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'AdminChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'BeaconUpgraded'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'GeoProposalProcessed'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'SubspaceAccepted'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'SubspaceRemoved'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'SuccessorSpaceCreated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Upgraded'): EventFragment
}

export interface AdminChangedEventObject {
  previousAdmin: string
  newAdmin: string
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>

export interface BeaconUpgradedEventObject {
  beacon: string
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>

export interface GeoProposalProcessedEventObject {
  blockIndex: number
  itemIndex: number
  contentUri: string
}
export type GeoProposalProcessedEvent = TypedEvent<
  [number, number, string],
  GeoProposalProcessedEventObject
>

export type GeoProposalProcessedEventFilter =
  TypedEventFilter<GeoProposalProcessedEvent>

export interface InitializedEventObject {
  version: number
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>

export interface SubspaceAcceptedEventObject {
  subspaceDao: string
}
export type SubspaceAcceptedEvent = TypedEvent<
  [string],
  SubspaceAcceptedEventObject
>

export type SubspaceAcceptedEventFilter =
  TypedEventFilter<SubspaceAcceptedEvent>

export interface SubspaceRemovedEventObject {
  subspaceDao: string
}
export type SubspaceRemovedEvent = TypedEvent<
  [string],
  SubspaceRemovedEventObject
>

export type SubspaceRemovedEventFilter = TypedEventFilter<SubspaceRemovedEvent>

export interface SuccessorSpaceCreatedEventObject {
  predecessorSpace: string
}
export type SuccessorSpaceCreatedEvent = TypedEvent<
  [string],
  SuccessorSpaceCreatedEventObject
>

export type SuccessorSpaceCreatedEventFilter =
  TypedEventFilter<SuccessorSpaceCreatedEvent>

export interface UpgradedEventObject {
  implementation: string
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>

export interface SpacePlugin extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: SpacePluginInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    UPGRADE_PLUGIN_PERMISSION_ID(overrides?: CallOverrides): Promise<[string]>

    acceptSubspace(
      _dao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    dao(overrides?: CallOverrides): Promise<[string]>

    implementation(overrides?: CallOverrides): Promise<[string]>

    initialize(
      _dao: PromiseOrValue<string>,
      _firstBlockContentUri: PromiseOrValue<string>,
      _predecessorSpace: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    pluginType(overrides?: CallOverrides): Promise<[number]>

    processGeoProposal(
      _blockIndex: PromiseOrValue<BigNumberish>,
      _itemIndex: PromiseOrValue<BigNumberish>,
      _contentUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>

    removeSubspace(
      _dao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>
  }

  UPGRADE_PLUGIN_PERMISSION_ID(overrides?: CallOverrides): Promise<string>

  acceptSubspace(
    _dao: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  dao(overrides?: CallOverrides): Promise<string>

  implementation(overrides?: CallOverrides): Promise<string>

  initialize(
    _dao: PromiseOrValue<string>,
    _firstBlockContentUri: PromiseOrValue<string>,
    _predecessorSpace: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  pluginType(overrides?: CallOverrides): Promise<number>

  processGeoProposal(
    _blockIndex: PromiseOrValue<BigNumberish>,
    _itemIndex: PromiseOrValue<BigNumberish>,
    _contentUri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  proxiableUUID(overrides?: CallOverrides): Promise<string>

  removeSubspace(
    _dao: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  supportsInterface(
    _interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    UPGRADE_PLUGIN_PERMISSION_ID(overrides?: CallOverrides): Promise<string>

    acceptSubspace(
      _dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    dao(overrides?: CallOverrides): Promise<string>

    implementation(overrides?: CallOverrides): Promise<string>

    initialize(
      _dao: PromiseOrValue<string>,
      _firstBlockContentUri: PromiseOrValue<string>,
      _predecessorSpace: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    pluginType(overrides?: CallOverrides): Promise<number>

    processGeoProposal(
      _blockIndex: PromiseOrValue<BigNumberish>,
      _itemIndex: PromiseOrValue<BigNumberish>,
      _contentUri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    proxiableUUID(overrides?: CallOverrides): Promise<string>

    removeSubspace(
      _dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {
    'AdminChanged(address,address)'(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter
    AdminChanged(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter

    'BeaconUpgraded(address)'(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter

    'GeoProposalProcessed(uint32,uint32,string)'(
      blockIndex?: null,
      itemIndex?: null,
      contentUri?: null
    ): GeoProposalProcessedEventFilter
    GeoProposalProcessed(
      blockIndex?: null,
      itemIndex?: null,
      contentUri?: null
    ): GeoProposalProcessedEventFilter

    'Initialized(uint8)'(version?: null): InitializedEventFilter
    Initialized(version?: null): InitializedEventFilter

    'SubspaceAccepted(address)'(subspaceDao?: null): SubspaceAcceptedEventFilter
    SubspaceAccepted(subspaceDao?: null): SubspaceAcceptedEventFilter

    'SubspaceRemoved(address)'(subspaceDao?: null): SubspaceRemovedEventFilter
    SubspaceRemoved(subspaceDao?: null): SubspaceRemovedEventFilter

    'SuccessorSpaceCreated(address)'(
      predecessorSpace?: null
    ): SuccessorSpaceCreatedEventFilter
    SuccessorSpaceCreated(
      predecessorSpace?: null
    ): SuccessorSpaceCreatedEventFilter

    'Upgraded(address)'(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter
  }

  estimateGas: {
    UPGRADE_PLUGIN_PERMISSION_ID(overrides?: CallOverrides): Promise<BigNumber>

    acceptSubspace(
      _dao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    dao(overrides?: CallOverrides): Promise<BigNumber>

    implementation(overrides?: CallOverrides): Promise<BigNumber>

    initialize(
      _dao: PromiseOrValue<string>,
      _firstBlockContentUri: PromiseOrValue<string>,
      _predecessorSpace: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    pluginType(overrides?: CallOverrides): Promise<BigNumber>

    processGeoProposal(
      _blockIndex: PromiseOrValue<BigNumberish>,
      _itemIndex: PromiseOrValue<BigNumberish>,
      _contentUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>

    removeSubspace(
      _dao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    UPGRADE_PLUGIN_PERMISSION_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    acceptSubspace(
      _dao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    dao(overrides?: CallOverrides): Promise<PopulatedTransaction>

    implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>

    initialize(
      _dao: PromiseOrValue<string>,
      _firstBlockContentUri: PromiseOrValue<string>,
      _predecessorSpace: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    pluginType(overrides?: CallOverrides): Promise<PopulatedTransaction>

    processGeoProposal(
      _blockIndex: PromiseOrValue<BigNumberish>,
      _itemIndex: PromiseOrValue<BigNumberish>,
      _contentUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>

    removeSubspace(
      _dao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>
  }
}
