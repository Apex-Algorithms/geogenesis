/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../common'
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'

export declare namespace IDAO {
  export type ActionStruct = {
    to: PromiseOrValue<string>
    value: PromiseOrValue<BigNumberish>
    data: PromiseOrValue<BytesLike>
  }

  export type ActionStructOutput = [string, BigNumber, string] & {
    to: string
    value: BigNumber
    data: string
  }
}

export declare namespace MemberAccessPlugin {
  export type ProposalParametersStruct = {
    minApprovals: PromiseOrValue<BigNumberish>
    snapshotBlock: PromiseOrValue<BigNumberish>
    startDate: PromiseOrValue<BigNumberish>
    endDate: PromiseOrValue<BigNumberish>
  }

  export type ProposalParametersStructOutput = [
    number,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    minApprovals: number
    snapshotBlock: BigNumber
    startDate: BigNumber
    endDate: BigNumber
  }

  export type MultisigSettingsStruct = {
    proposalDuration: PromiseOrValue<BigNumberish>
    mainVotingPlugin: PromiseOrValue<string>
  }

  export type MultisigSettingsStructOutput = [BigNumber, string] & {
    proposalDuration: BigNumber
    mainVotingPlugin: string
  }
}

export interface TestMemberAccessPluginInterface extends utils.Interface {
  functions: {
    'UPDATE_MULTISIG_SETTINGS_PERMISSION_ID()': FunctionFragment
    'UPGRADE_PLUGIN_PERMISSION_ID()': FunctionFragment
    'approve(uint256)': FunctionFragment
    'canApprove(uint256,address)': FunctionFragment
    'canExecute(uint256)': FunctionFragment
    'createArbitraryProposal(bytes,(address,uint256,bytes)[])': FunctionFragment
    'dao()': FunctionFragment
    'execute(uint256)': FunctionFragment
    'getProposal(uint256)': FunctionFragment
    'hasApproved(uint256,address)': FunctionFragment
    'implementation()': FunctionFragment
    'initialize(address,(uint64,address))': FunctionFragment
    'isEditor(address)': FunctionFragment
    'isMember(address)': FunctionFragment
    'lastMultisigSettingsChange()': FunctionFragment
    'multisigSettings()': FunctionFragment
    'pluginType()': FunctionFragment
    'proposalCount()': FunctionFragment
    'proposeNewMember(bytes,address)': FunctionFragment
    'proposeRemoveMember(bytes,address)': FunctionFragment
    'proxiableUUID()': FunctionFragment
    'reject(uint256)': FunctionFragment
    'supportsInterface(bytes4)': FunctionFragment
    'updateMultisigSettings((uint64,address))': FunctionFragment
    'upgradeTo(address)': FunctionFragment
    'upgradeToAndCall(address,bytes)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'UPDATE_MULTISIG_SETTINGS_PERMISSION_ID'
      | 'UPGRADE_PLUGIN_PERMISSION_ID'
      | 'approve'
      | 'canApprove'
      | 'canExecute'
      | 'createArbitraryProposal'
      | 'dao'
      | 'execute'
      | 'getProposal'
      | 'hasApproved'
      | 'implementation'
      | 'initialize'
      | 'isEditor'
      | 'isMember'
      | 'lastMultisigSettingsChange'
      | 'multisigSettings'
      | 'pluginType'
      | 'proposalCount'
      | 'proposeNewMember'
      | 'proposeRemoveMember'
      | 'proxiableUUID'
      | 'reject'
      | 'supportsInterface'
      | 'updateMultisigSettings'
      | 'upgradeTo'
      | 'upgradeToAndCall'
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: 'UPDATE_MULTISIG_SETTINGS_PERMISSION_ID',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'UPGRADE_PLUGIN_PERMISSION_ID',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'canApprove',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'canExecute',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'createArbitraryProposal',
    values: [PromiseOrValue<BytesLike>, IDAO.ActionStruct[]]
  ): string
  encodeFunctionData(functionFragment: 'dao', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'execute',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'getProposal',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'hasApproved',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'implementation',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [PromiseOrValue<string>, MemberAccessPlugin.MultisigSettingsStruct]
  ): string
  encodeFunctionData(
    functionFragment: 'isEditor',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'isMember',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'lastMultisigSettingsChange',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'multisigSettings',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'pluginType', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'proposalCount',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'proposeNewMember',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'proposeRemoveMember',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'proxiableUUID',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'reject',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'supportsInterface',
    values: [PromiseOrValue<BytesLike>]
  ): string
  encodeFunctionData(
    functionFragment: 'updateMultisigSettings',
    values: [MemberAccessPlugin.MultisigSettingsStruct]
  ): string
  encodeFunctionData(
    functionFragment: 'upgradeTo',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'upgradeToAndCall',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string

  decodeFunctionResult(
    functionFragment: 'UPDATE_MULTISIG_SETTINGS_PERMISSION_ID',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'UPGRADE_PLUGIN_PERMISSION_ID',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'canApprove', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'canExecute', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'createArbitraryProposal',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'dao', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'execute', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getProposal', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'hasApproved', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'implementation',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isEditor', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isMember', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'lastMultisigSettingsChange',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'multisigSettings',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'pluginType', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'proposalCount',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'proposeNewMember',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'proposeRemoveMember',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'proxiableUUID',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'reject', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'supportsInterface',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'updateMultisigSettings',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'upgradeTo', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'upgradeToAndCall',
    data: BytesLike
  ): Result

  events: {
    'AdminChanged(address,address)': EventFragment
    'Approved(uint256,address)': EventFragment
    'BeaconUpgraded(address)': EventFragment
    'Initialized(uint8)': EventFragment
    'MultisigSettingsUpdated(uint64,address)': EventFragment
    'ProposalCreated(uint256,address,uint64,uint64,bytes,tuple[],uint256)': EventFragment
    'ProposalExecuted(uint256)': EventFragment
    'Rejected(uint256,address)': EventFragment
    'Upgraded(address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'AdminChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Approved'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'BeaconUpgraded'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'MultisigSettingsUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ProposalCreated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ProposalExecuted'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Rejected'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Upgraded'): EventFragment
}

export interface AdminChangedEventObject {
  previousAdmin: string
  newAdmin: string
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>

export interface ApprovedEventObject {
  proposalId: BigNumber
  editor: string
}
export type ApprovedEvent = TypedEvent<[BigNumber, string], ApprovedEventObject>

export type ApprovedEventFilter = TypedEventFilter<ApprovedEvent>

export interface BeaconUpgradedEventObject {
  beacon: string
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>

export interface InitializedEventObject {
  version: number
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>

export interface MultisigSettingsUpdatedEventObject {
  proposalDuration: BigNumber
  mainVotingPlugin: string
}
export type MultisigSettingsUpdatedEvent = TypedEvent<
  [BigNumber, string],
  MultisigSettingsUpdatedEventObject
>

export type MultisigSettingsUpdatedEventFilter =
  TypedEventFilter<MultisigSettingsUpdatedEvent>

export interface ProposalCreatedEventObject {
  proposalId: BigNumber
  creator: string
  startDate: BigNumber
  endDate: BigNumber
  metadata: string
  actions: IDAO.ActionStructOutput[]
  allowFailureMap: BigNumber
}
export type ProposalCreatedEvent = TypedEvent<
  [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    string,
    IDAO.ActionStructOutput[],
    BigNumber
  ],
  ProposalCreatedEventObject
>

export type ProposalCreatedEventFilter = TypedEventFilter<ProposalCreatedEvent>

export interface ProposalExecutedEventObject {
  proposalId: BigNumber
}
export type ProposalExecutedEvent = TypedEvent<
  [BigNumber],
  ProposalExecutedEventObject
>

export type ProposalExecutedEventFilter =
  TypedEventFilter<ProposalExecutedEvent>

export interface RejectedEventObject {
  proposalId: BigNumber
  editor: string
}
export type RejectedEvent = TypedEvent<[BigNumber, string], RejectedEventObject>

export type RejectedEventFilter = TypedEventFilter<RejectedEvent>

export interface UpgradedEventObject {
  implementation: string
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>

export interface TestMemberAccessPlugin extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: TestMemberAccessPluginInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    UPDATE_MULTISIG_SETTINGS_PERMISSION_ID(
      overrides?: CallOverrides
    ): Promise<[string]>

    UPGRADE_PLUGIN_PERMISSION_ID(overrides?: CallOverrides): Promise<[string]>

    approve(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    canApprove(
      _proposalId: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    canExecute(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    createArbitraryProposal(
      _metadata: PromiseOrValue<BytesLike>,
      _actions: IDAO.ActionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    dao(overrides?: CallOverrides): Promise<[string]>

    execute(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    getProposal(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        number,
        MemberAccessPlugin.ProposalParametersStructOutput,
        IDAO.ActionStructOutput[],
        BigNumber
      ] & {
        executed: boolean
        approvals: number
        parameters: MemberAccessPlugin.ProposalParametersStructOutput
        actions: IDAO.ActionStructOutput[]
        failsafeActionMap: BigNumber
      }
    >

    hasApproved(
      _proposalId: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    implementation(overrides?: CallOverrides): Promise<[string]>

    initialize(
      _dao: PromiseOrValue<string>,
      _multisigSettings: MemberAccessPlugin.MultisigSettingsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    isEditor(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    isMember(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    lastMultisigSettingsChange(overrides?: CallOverrides): Promise<[BigNumber]>

    multisigSettings(overrides?: CallOverrides): Promise<
      [BigNumber, string] & {
        proposalDuration: BigNumber
        mainVotingPlugin: string
      }
    >

    pluginType(overrides?: CallOverrides): Promise<[number]>

    proposalCount(overrides?: CallOverrides): Promise<[BigNumber]>

    proposeNewMember(
      _metadata: PromiseOrValue<BytesLike>,
      _proposedMember: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    proposeRemoveMember(
      _metadata: PromiseOrValue<BytesLike>,
      _proposedMember: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>

    reject(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    updateMultisigSettings(
      _multisigSettings: MemberAccessPlugin.MultisigSettingsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>
  }

  UPDATE_MULTISIG_SETTINGS_PERMISSION_ID(
    overrides?: CallOverrides
  ): Promise<string>

  UPGRADE_PLUGIN_PERMISSION_ID(overrides?: CallOverrides): Promise<string>

  approve(
    _proposalId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  canApprove(
    _proposalId: PromiseOrValue<BigNumberish>,
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>

  canExecute(
    _proposalId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>

  createArbitraryProposal(
    _metadata: PromiseOrValue<BytesLike>,
    _actions: IDAO.ActionStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  dao(overrides?: CallOverrides): Promise<string>

  execute(
    _proposalId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  getProposal(
    _proposalId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      number,
      MemberAccessPlugin.ProposalParametersStructOutput,
      IDAO.ActionStructOutput[],
      BigNumber
    ] & {
      executed: boolean
      approvals: number
      parameters: MemberAccessPlugin.ProposalParametersStructOutput
      actions: IDAO.ActionStructOutput[]
      failsafeActionMap: BigNumber
    }
  >

  hasApproved(
    _proposalId: PromiseOrValue<BigNumberish>,
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>

  implementation(overrides?: CallOverrides): Promise<string>

  initialize(
    _dao: PromiseOrValue<string>,
    _multisigSettings: MemberAccessPlugin.MultisigSettingsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  isEditor(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>

  isMember(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>

  lastMultisigSettingsChange(overrides?: CallOverrides): Promise<BigNumber>

  multisigSettings(overrides?: CallOverrides): Promise<
    [BigNumber, string] & {
      proposalDuration: BigNumber
      mainVotingPlugin: string
    }
  >

  pluginType(overrides?: CallOverrides): Promise<number>

  proposalCount(overrides?: CallOverrides): Promise<BigNumber>

  proposeNewMember(
    _metadata: PromiseOrValue<BytesLike>,
    _proposedMember: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  proposeRemoveMember(
    _metadata: PromiseOrValue<BytesLike>,
    _proposedMember: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  proxiableUUID(overrides?: CallOverrides): Promise<string>

  reject(
    _proposalId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  supportsInterface(
    _interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>

  updateMultisigSettings(
    _multisigSettings: MemberAccessPlugin.MultisigSettingsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    UPDATE_MULTISIG_SETTINGS_PERMISSION_ID(
      overrides?: CallOverrides
    ): Promise<string>

    UPGRADE_PLUGIN_PERMISSION_ID(overrides?: CallOverrides): Promise<string>

    approve(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    canApprove(
      _proposalId: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>

    canExecute(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>

    createArbitraryProposal(
      _metadata: PromiseOrValue<BytesLike>,
      _actions: IDAO.ActionStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>

    dao(overrides?: CallOverrides): Promise<string>

    execute(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    getProposal(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        number,
        MemberAccessPlugin.ProposalParametersStructOutput,
        IDAO.ActionStructOutput[],
        BigNumber
      ] & {
        executed: boolean
        approvals: number
        parameters: MemberAccessPlugin.ProposalParametersStructOutput
        actions: IDAO.ActionStructOutput[]
        failsafeActionMap: BigNumber
      }
    >

    hasApproved(
      _proposalId: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>

    implementation(overrides?: CallOverrides): Promise<string>

    initialize(
      _dao: PromiseOrValue<string>,
      _multisigSettings: MemberAccessPlugin.MultisigSettingsStruct,
      overrides?: CallOverrides
    ): Promise<void>

    isEditor(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>

    isMember(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>

    lastMultisigSettingsChange(overrides?: CallOverrides): Promise<BigNumber>

    multisigSettings(overrides?: CallOverrides): Promise<
      [BigNumber, string] & {
        proposalDuration: BigNumber
        mainVotingPlugin: string
      }
    >

    pluginType(overrides?: CallOverrides): Promise<number>

    proposalCount(overrides?: CallOverrides): Promise<BigNumber>

    proposeNewMember(
      _metadata: PromiseOrValue<BytesLike>,
      _proposedMember: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    proposeRemoveMember(
      _metadata: PromiseOrValue<BytesLike>,
      _proposedMember: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    proxiableUUID(overrides?: CallOverrides): Promise<string>

    reject(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>

    updateMultisigSettings(
      _multisigSettings: MemberAccessPlugin.MultisigSettingsStruct,
      overrides?: CallOverrides
    ): Promise<void>

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {
    'AdminChanged(address,address)'(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter
    AdminChanged(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter

    'Approved(uint256,address)'(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      editor?: PromiseOrValue<string> | null
    ): ApprovedEventFilter
    Approved(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      editor?: PromiseOrValue<string> | null
    ): ApprovedEventFilter

    'BeaconUpgraded(address)'(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter

    'Initialized(uint8)'(version?: null): InitializedEventFilter
    Initialized(version?: null): InitializedEventFilter

    'MultisigSettingsUpdated(uint64,address)'(
      proposalDuration?: null,
      mainVotingPlugin?: null
    ): MultisigSettingsUpdatedEventFilter
    MultisigSettingsUpdated(
      proposalDuration?: null,
      mainVotingPlugin?: null
    ): MultisigSettingsUpdatedEventFilter

    'ProposalCreated(uint256,address,uint64,uint64,bytes,tuple[],uint256)'(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      creator?: PromiseOrValue<string> | null,
      startDate?: null,
      endDate?: null,
      metadata?: null,
      actions?: null,
      allowFailureMap?: null
    ): ProposalCreatedEventFilter
    ProposalCreated(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      creator?: PromiseOrValue<string> | null,
      startDate?: null,
      endDate?: null,
      metadata?: null,
      actions?: null,
      allowFailureMap?: null
    ): ProposalCreatedEventFilter

    'ProposalExecuted(uint256)'(
      proposalId?: PromiseOrValue<BigNumberish> | null
    ): ProposalExecutedEventFilter
    ProposalExecuted(
      proposalId?: PromiseOrValue<BigNumberish> | null
    ): ProposalExecutedEventFilter

    'Rejected(uint256,address)'(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      editor?: PromiseOrValue<string> | null
    ): RejectedEventFilter
    Rejected(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      editor?: PromiseOrValue<string> | null
    ): RejectedEventFilter

    'Upgraded(address)'(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter
  }

  estimateGas: {
    UPDATE_MULTISIG_SETTINGS_PERMISSION_ID(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    UPGRADE_PLUGIN_PERMISSION_ID(overrides?: CallOverrides): Promise<BigNumber>

    approve(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    canApprove(
      _proposalId: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    canExecute(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    createArbitraryProposal(
      _metadata: PromiseOrValue<BytesLike>,
      _actions: IDAO.ActionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    dao(overrides?: CallOverrides): Promise<BigNumber>

    execute(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    getProposal(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    hasApproved(
      _proposalId: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    implementation(overrides?: CallOverrides): Promise<BigNumber>

    initialize(
      _dao: PromiseOrValue<string>,
      _multisigSettings: MemberAccessPlugin.MultisigSettingsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    isEditor(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    isMember(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    lastMultisigSettingsChange(overrides?: CallOverrides): Promise<BigNumber>

    multisigSettings(overrides?: CallOverrides): Promise<BigNumber>

    pluginType(overrides?: CallOverrides): Promise<BigNumber>

    proposalCount(overrides?: CallOverrides): Promise<BigNumber>

    proposeNewMember(
      _metadata: PromiseOrValue<BytesLike>,
      _proposedMember: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    proposeRemoveMember(
      _metadata: PromiseOrValue<BytesLike>,
      _proposedMember: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>

    reject(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    updateMultisigSettings(
      _multisigSettings: MemberAccessPlugin.MultisigSettingsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    UPDATE_MULTISIG_SETTINGS_PERMISSION_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    UPGRADE_PLUGIN_PERMISSION_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    approve(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    canApprove(
      _proposalId: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    canExecute(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    createArbitraryProposal(
      _metadata: PromiseOrValue<BytesLike>,
      _actions: IDAO.ActionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    dao(overrides?: CallOverrides): Promise<PopulatedTransaction>

    execute(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    getProposal(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    hasApproved(
      _proposalId: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>

    initialize(
      _dao: PromiseOrValue<string>,
      _multisigSettings: MemberAccessPlugin.MultisigSettingsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    isEditor(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    isMember(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    lastMultisigSettingsChange(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    multisigSettings(overrides?: CallOverrides): Promise<PopulatedTransaction>

    pluginType(overrides?: CallOverrides): Promise<PopulatedTransaction>

    proposalCount(overrides?: CallOverrides): Promise<PopulatedTransaction>

    proposeNewMember(
      _metadata: PromiseOrValue<BytesLike>,
      _proposedMember: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    proposeRemoveMember(
      _metadata: PromiseOrValue<BytesLike>,
      _proposedMember: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>

    reject(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    updateMultisigSettings(
      _multisigSettings: MemberAccessPlugin.MultisigSettingsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>
  }
}
