/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../common'
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'

export interface IEditorsInterface extends utils.Interface {
  functions: {
    'isEditor(address)': FunctionFragment
  }

  getFunction(nameOrSignatureOrTopic: 'isEditor'): FunctionFragment

  encodeFunctionData(
    functionFragment: 'isEditor',
    values: [PromiseOrValue<string>]
  ): string

  decodeFunctionResult(functionFragment: 'isEditor', data: BytesLike): Result

  events: {
    'EditorAdded(address)': EventFragment
    'EditorRemoved(address)': EventFragment
    'EditorsAdded(address[])': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'EditorAdded'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'EditorRemoved'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'EditorsAdded'): EventFragment
}

export interface EditorAddedEventObject {
  editor: string
}
export type EditorAddedEvent = TypedEvent<[string], EditorAddedEventObject>

export type EditorAddedEventFilter = TypedEventFilter<EditorAddedEvent>

export interface EditorRemovedEventObject {
  editor: string
}
export type EditorRemovedEvent = TypedEvent<[string], EditorRemovedEventObject>

export type EditorRemovedEventFilter = TypedEventFilter<EditorRemovedEvent>

export interface EditorsAddedEventObject {
  editors: string[]
}
export type EditorsAddedEvent = TypedEvent<[string[]], EditorsAddedEventObject>

export type EditorsAddedEventFilter = TypedEventFilter<EditorsAddedEvent>

export interface IEditors extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: IEditorsInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    isEditor(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>
  }

  isEditor(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>

  callStatic: {
    isEditor(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>
  }

  filters: {
    'EditorAdded(address)'(editor?: null): EditorAddedEventFilter
    EditorAdded(editor?: null): EditorAddedEventFilter

    'EditorRemoved(address)'(editor?: null): EditorRemovedEventFilter
    EditorRemoved(editor?: null): EditorRemovedEventFilter

    'EditorsAdded(address[])'(editors?: null): EditorsAddedEventFilter
    EditorsAdded(editors?: null): EditorsAddedEventFilter
  }

  estimateGas: {
    isEditor(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>
  }

  populateTransaction: {
    isEditor(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>
  }
}
