/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../common'
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'

export interface IMembersInterface extends utils.Interface {
  functions: {
    'isMember(address)': FunctionFragment
  }

  getFunction(nameOrSignatureOrTopic: 'isMember'): FunctionFragment

  encodeFunctionData(
    functionFragment: 'isMember',
    values: [PromiseOrValue<string>]
  ): string

  decodeFunctionResult(functionFragment: 'isMember', data: BytesLike): Result

  events: {
    'MemberAdded(address)': EventFragment
    'MemberRemoved(address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'MemberAdded'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'MemberRemoved'): EventFragment
}

export interface MemberAddedEventObject {
  member: string
}
export type MemberAddedEvent = TypedEvent<[string], MemberAddedEventObject>

export type MemberAddedEventFilter = TypedEventFilter<MemberAddedEvent>

export interface MemberRemovedEventObject {
  member: string
}
export type MemberRemovedEvent = TypedEvent<[string], MemberRemovedEventObject>

export type MemberRemovedEventFilter = TypedEventFilter<MemberRemovedEvent>

export interface IMembers extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: IMembersInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    isMember(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>
  }

  isMember(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>

  callStatic: {
    isMember(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>
  }

  filters: {
    'MemberAdded(address)'(member?: null): MemberAddedEventFilter
    MemberAdded(member?: null): MemberAddedEventFilter

    'MemberRemoved(address)'(member?: null): MemberRemovedEventFilter
    MemberRemoved(member?: null): MemberRemovedEventFilter
  }

  estimateGas: {
    isMember(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>
  }

  populateTransaction: {
    isMember(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>
  }
}
