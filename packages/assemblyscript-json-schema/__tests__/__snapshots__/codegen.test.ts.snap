// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generates array type 1`] = `
"import { JSON } from \\"assemblyscript-json/assembly\\";
import { Value } from \\"./Value\\";
import { mapOrNull } from \\"./collection-utils\\";

export class ValuesContainer {
  values: Value[];
  type: string;

  constructor(values: Value[], type: string) {
    this.values = values;
    this.type = type;
  }

  toJSON(): JSON.Value {
    const __obj = new JSON.Obj();
    const values = new JSON.Arr();
    for (let i = 0; i < this.values.length; i++) {
      values.push(this.values[i].toJSON());
    }
    __obj.set(\\"values\\", values);
    const type = new JSON.Str(this.type);
    __obj.set(\\"type\\", type);

    return __obj;
  }

  static fromJSON(__json: JSON.Value): ValuesContainer | null {
    if (!__json.isObj) return null;
    const __obj = <JSON.Obj>__json;
    const __values = __obj.getArr(\\"values\\");
    if (__values == null) return null;
    const __valuesArray = __values.valueOf();
    const values = mapOrNull<JSON.Value, Value>(
      __valuesArray,
      (item: JSON.Value): Value | null => Value.fromJSON(item)
    );
    if (!values) return null;
    const __type = __obj.getString(\\"type\\");
    if (__type == null) return null;
    const type = __type.valueOf();

    return new ValuesContainer(values, type);
  }
}
"
`;

exports[`generates object type 1`] = `
"import { JSON } from \\"assemblyscript-json/assembly\\";
import { Value } from \\"./Value\\";

export class NumberValue extends Value {
  type: string;
  value: number;

  constructor(type: string, value: number) {
    super(type);
    this.type = type;
    this.value = value;
  }

  toJSON(): JSON.Value {
    const __obj = new JSON.Obj();
    const type = new JSON.Str(this.type);
    __obj.set(\\"type\\", type);
    const value = new JSON.Num(this.value);
    __obj.set(\\"value\\", value);

    return __obj;
  }

  static fromJSON(__json: JSON.Value): NumberValue | null {
    if (!__json.isObj) return null;
    const __obj = <JSON.Obj>__json;
    const __type = __obj.getString(\\"type\\");
    if (__type == null) return null;
    const type = __type.valueOf();
    const __value = __obj.getNum(\\"value\\");
    if (__value == null) return null;
    const value = __value.valueOf();

    return new NumberValue(type, value);
  }
}
"
`;

exports[`generates object type 2`] = `
"import { JSON } from \\"assemblyscript-json/assembly\\";
import { Value } from \\"./Value\\";

export class ValueContainer {
  value: Value;
  type: string;

  constructor(value: Value, type: string) {
    this.value = value;
    this.type = type;
  }

  toJSON(): JSON.Value {
    const __obj = new JSON.Obj();
    const value = this.value.toJSON();
    __obj.set(\\"value\\", value);
    const type = new JSON.Str(this.type);
    __obj.set(\\"type\\", type);

    return __obj;
  }

  static fromJSON(__json: JSON.Value): ValueContainer | null {
    if (!__json.isObj) return null;
    const __obj = <JSON.Obj>__json;
    const __value = __obj.getObj(\\"value\\");
    if (__value == null) return null;
    const value = Value.fromJSON(__value);
    if (!value) return null;
    const __type = __obj.getString(\\"type\\");
    if (__type == null) return null;
    const type = __type.valueOf();

    return new ValueContainer(value, type);
  }
}
"
`;

exports[`generates union type 1`] = `
"import { JSON } from \\"assemblyscript-json/assembly\\";
import { NumberValue } from \\"./NumberValue\\";
import { StringValue } from \\"./StringValue\\";

export class Value {
  type: string;

  constructor(type: string) {
    this.type = type;
  }

  toJSON(): JSON.Value {
    const typeName = this.type;
    if (typeName == \\"NumberValue\\") return (<NumberValue>this).toJSON();
    if (typeName == \\"StringValue\\") return (<StringValue>this).toJSON();
    throw \\"undefined variant of: Value\\";
  }

  static fromJSON(__json: JSON.Value): Value | null {
    if (!__json.isObj) return null;
    const __obj = <JSON.Obj>__json;
    const type = __obj.getString(\\"type\\");
    if (!type) return null;
    const typeName = type.valueOf();
    if (typeName == \\"NumberValue\\") return NumberValue.fromJSON(__json);
    if (typeName == \\"StringValue\\") return StringValue.fromJSON(__json);
    return null;
  }
}
"
`;
